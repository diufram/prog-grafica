using OpenTK.Graphics.OpenGL4;
using OpenTK.Mathematics;
using OpenTK.Windowing.Common;
using OpenTK.Windowing.Desktop;

public class Game : GameWindow
{
    private readonly float[] _vertices =
    {
        // Frente
        -0.5f, -0.5f,  0.5f,
         0.5f, -0.5f,  0.5f,
         0.5f,  0.5f,  0.5f,
        -0.5f,  0.5f,  0.5f,

        // Atrás
        -0.5f, -0.5f, -0.5f,
         0.5f, -0.5f, -0.5f,
         0.5f,  0.5f, -0.5f,
        -0.5f,  0.5f, -0.5f,
    };

    private readonly uint[] _indices =
    {
        // Frente
        0, 1, 2,
        2, 3, 0,

        // Atrás
        4, 5, 6,
        6, 7, 4,

        // Izquierda
        0, 3, 7,
        7, 4, 0,

        // Derecha
        1, 2, 6,
        6, 5, 1,

        // Arriba
        3, 2, 6,
        6, 7, 3,

        // Abajo
        0, 1, 5,
        5, 4, 0
    };

    private readonly float[] _colors =
    {
        // Colores del frente (rojo)
        1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f,
        1.0f, 0.0f, 0.0f,

        // Colores de la parte trasera (amarillo)
        1.0f, 1.0f, 0.0f,
        1.0f, 1.0f, 0.0f,
        1.0f, 1.0f, 0.0f,
        1.0f, 1.0f, 0.0f,
    };

    private int _vertexBufferObject;
    private int _colorBufferObject;
    private int _indexBufferObject;
    private int _vertexArrayObject;
    private int _shaderProgram;
    private Matrix4 _modelMatrix;
    private Matrix4 _viewMatrix;
    private Matrix4 _projectionMatrix;

    public Game(GameWindowSettings gameWindowSettings, NativeWindowSettings nativeWindowSettings)
        : base(gameWindowSettings, nativeWindowSettings) { }

    protected override void OnLoad()
    {
        base.OnLoad();

        GL.ClearColor(0.5f, 0.7f, 1.0f, 1.0f);
        GL.Enable(EnableCap.DepthTest);

        // Configuración de buffers
        _vertexArrayObject = GL.GenVertexArray();
        GL.BindVertexArray(_vertexArrayObject);

        _vertexBufferObject = GL.GenBuffer();
        GL.BindBuffer(BufferTarget.ArrayBuffer, _vertexBufferObject);
        GL.BufferData(BufferTarget.ArrayBuffer, _vertices.Length * sizeof(float), _vertices, BufferUsageHint.StaticDraw);

        _indexBufferObject = GL.GenBuffer();
        GL.BindBuffer(BufferTarget.ElementArrayBuffer, _indexBufferObject);
        GL.BufferData(BufferTarget.ElementArrayBuffer, _indices.Length * sizeof(uint), _indices, BufferUsageHint.StaticDraw);

        _colorBufferObject = GL.GenBuffer();
        GL.BindBuffer(BufferTarget.ArrayBuffer, _colorBufferObject);
        GL.BufferData(BufferTarget.ArrayBuffer, _colors.Length * sizeof(float), _colors, BufferUsageHint.StaticDraw);

        // Vertex Shader
        string vertexShaderCode = @"
        #version 330 core
        layout(location = 0) in vec3 aPosition;
        layout(location = 1) in vec3 aColor;

        uniform mat4 model;
        uniform mat4 view;
        uniform mat4 projection;

        out vec3 vertexColor;

        void main(void)
        {
            gl_Position = projection * view * model * vec4(aPosition, 1.0);
            vertexColor = aColor;
        }";
        int vertexShader = GL.CreateShader(ShaderType.VertexShader);
        GL.ShaderSource(vertexShader, vertexShaderCode);
        GL.CompileShader(vertexShader);
        CheckShaderCompilation(vertexShader, "Vertex");

        // Fragment Shader
        string fragmentShaderCode = @"
        #version 330 core
        in vec3 vertexColor;
        out vec4 fragColor;

        void main(void)
        {
            fragColor = vec4(vertexColor, 1.0);
        }";
        int fragmentShader = GL.CreateShader(ShaderType.FragmentShader);
        GL.ShaderSource(fragmentShader, fragmentShaderCode);
        GL.CompileShader(fragmentShader);
        CheckShaderCompilation(fragmentShader, "Fragment");

        // Shader Program
        _shaderProgram = GL.CreateProgram();
        GL.AttachShader(_shaderProgram, vertexShader);
        GL.AttachShader(_shaderProgram, fragmentShader);
        GL.LinkProgram(_shaderProgram);

        GL.DeleteShader(vertexShader);
        GL.DeleteShader(fragmentShader);

        // Configuración de atributos
        GL.BindBuffer(BufferTarget.ArrayBuffer, _vertexBufferObject);
        GL.VertexAttribPointer(0, 3, VertexAttribPointerType.Float, false, 3 * sizeof(float), 0);
        GL.EnableVertexAttribArray(0);

        GL.BindBuffer(BufferTarget.ArrayBuffer, _colorBufferObject);
        GL.VertexAttribPointer(1, 3, VertexAttribPointerType.Float, false, 3 * sizeof(float), 0);
        GL.EnableVertexAttribArray(1);

        // Matrices de transformación
        _modelMatrix = Matrix4.Identity;
        _viewMatrix = Matrix4.LookAt(new Vector3(1.5f, 1.5f, 1.5f), Vector3.Zero, Vector3.UnitY);
        _projectionMatrix = Matrix4.CreatePerspectiveFieldOfView(MathHelper.DegreesToRadians(45.0f), Size.X / (float)Size.Y, 0.1f, 100.0f);

        GL.UseProgram(_shaderProgram);

        int modelLocation = GL.GetUniformLocation(_shaderProgram, "model");
        int viewLocation = GL.GetUniformLocation(_shaderProgram, "view");
        int projectionLocation = GL.GetUniformLocation(_shaderProgram, "projection");

        GL.UniformMatrix4(modelLocation, false, ref _modelMatrix);
        GL.UniformMatrix4(viewLocation, false, ref _viewMatrix);
        GL.UniformMatrix4(projectionLocation, false, ref _projectionMatrix);
    }

    protected override void OnRenderFrame(FrameEventArgs e)
    {
        base.OnRenderFrame(e);

        GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit);

        GL.UseProgram(_shaderProgram);
        GL.BindVertexArray(_vertexArrayObject);

        GL.DrawElements(PrimitiveType.Triangles, _indices.Length, DrawElementsType.UnsignedInt, 0);

        SwapBuffers();
    }

    protected override void OnUnload()
    {
        base.OnUnload();

        GL.BindBuffer(BufferTarget.ArrayBuffer, 0);
        GL.BindVertexArray(0);
        GL.UseProgram(0);

        GL.DeleteBuffer(_vertexBufferObject);
        GL.DeleteBuffer(_colorBufferObject);
        GL.DeleteVertexArray(_vertexArrayObject);
        GL.DeleteProgram(_shaderProgram);
    }

    private void CheckShaderCompilation(int shader, string shaderType)
    {
        GL.GetShader(shader, ShaderParameter.CompileStatus, out int success);
        if (success == (int)All.False)
        {
            string infoLog = GL.GetShaderInfoLog(shader);
            Console.WriteLine($"Error compiling {shaderType} shader: {infoLog}");
        }
    }

    public static void Main(string[] args)
    {
        var gameWindowSettings = new GameWindowSettings
        {
         
            UpdateFrequency = 60.0
        };
        var nativeWindowSettings = new NativeWindowSettings
        {
            Title = "OpenTK 3D Cube",
            Flags = ContextFlags.ForwardCompatible
        };

        using (var game = new Game(gameWindowSettings, nativeWindowSettings))
        {
            game.Run();
        }
    }
}
